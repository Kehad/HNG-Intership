import React, { useState, useRef, useEffect } from "react";
import { Send, Loader2, Languages, FileText } from "lucide-react";
import { Card, CardContent } from "./custom/card";
import { Button } from "./custom/button";
import {
  Select,
  SelectContent,
  SelectTrigger,
  SelectItem,
  SelectValue,
} from "./custom/select";
import { Alert, AlertDescription } from "./custom/alert";

const languages = [
  { code: "en", name: "English" },
  { code: "pt", name: "Portuguese" },
  { code: "es", name: "Spanish" },
  { code: "ru", name: "Russian" },
  { code: "tr", name: "Turkish" },
  { code: "fr", name: "French" },
];

const HelloWorld = () => {
  const [messages, setMessages] = useState([
    {
      id: 1739828729046,
      text: "Hello World",
      language: "en",
      translation: "",
      summary: "",
    },
  ]);
  const [inputText, setInputText] = useState("Hello World");
  const [selectedLanguage, setSelectedLanguage] = useState("en");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [translateMessageId, setTranslateMessageId] = useState(null);
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const ets = async (text) => {
    const languageDetectorCapabilities =
      await self.ai.languageDetector.capabilities();
    const canDetect = languageDetectorCapabilities.available;
    let detector;
    if (canDetect === "no") {
      // The language detector isn't usable.
      return;
    }
    if (canDetect === "readily") {
      const someUserText = "Hallo und herzlich willkommen!";
      // The language detector can immediately be used.
      detector = await self.ai.languageDetector.create();
      const results = await detector.detect(text);
      return results[0];
    } else {
      // The language detector can be used after model download.
      detector = await self.ai.languageDetector.create({
        monitor(m) {
          m.addEventListener("downloadprogress", (e) => {
            console.log(`Downloaded ${e.loaded} of ${e.total} bytes.`);
          });
        },
      });
      await detector.ready;
    }
  };

  const handleSend = async () => {
    if (!inputText.trim()) {
      setError("Please enter some text");
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      // Detect language using Chrome AI API
      const { detectedLanguage } = await ets(inputText);
      const newMessage = {
        id: Date.now(),
        text: inputText,
        language: detectedLanguage,
        translation: "",
        summary: "",
      };
      setMessages([...messages, newMessage]);
      setInputText("");
    } catch (err) {
      setError("Failed to process text. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleTranslate = async (messageId, targetLanguage) => {
    setIsLoading(true);
    setError(null);

    try {
      const message = messages.find((m) => m.id === messageId);
      if (!message) return;

      const translator = await self.translation.createTranslator({
        sourceLanguage: message.language,
        targetLanguage: targetLanguage,
      });

      const translation = await translator.translate(message.text);

      setMessages(
        messages.map((m) => {
          if (m.id === messageId) {
            return {
              ...m,
              language: targetLanguage,
              translation: translation,
            };
          }
          return m;
        })
      );
    } catch (err) {
      setError("Translation failed. Please try again.");
    } finally {
      setIsLoading(false);
      setTranslateMessageId(null);
    }
  };

  const buttonTranslateHandler = (messageId) => {
    setTranslateMessageId(translateMessageId === messageId ? null : messageId);
  };

  const handleSummarize = async (messageId) => {
    setIsLoading(true);
    setError(null);

    try {
      const message = messages.find((m) => m.id === messageId);
      if (!message) return;

      const options = {
        sharedContext: "Extra content",
        type: "key-points",
        format: "markdown",
        length: "medium",
      };

      const available = (await self.ai.summarizer.capabilities()).available;
      console.log(available);
      let summarizer;

     
        summarizer = await self.ai.summarizer.create(options);
        console.log(summarizer);
        const summary = await summarizer.summarize(message.text, {
          context: "This article is intended for a tech-savvy audience.",
        });
        console.log(summary);

      setMessages(
        messages.map((m) => {
          if (m.id === messageId) {
            return {
              ...m,
              summary: summary,
            };
          }
          return m;
        })
      );
    } catch (err) {
      setError("Summarization failed. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-white p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        <Card className="border-none shadow-xl bg-white/80 backdrop-blur-sm">
          <CardContent className="h-[calc(100vh-16rem)] overflow-y-auto p-6 scrollbar-thin scrollbar-thumb-blue-200 scrollbar-track-transparent">
            {messages?.map((message) => (
              <div key={message.id} className="mb-6 last:mb-8 animate-fadeIn">
                <div className="group bg-white rounded-2xl p-6 shadow-sm hover:shadow-md transition-all duration-200 border border-gray-100">
                  <div className="flex items-start justify-between gap-4">
                    <div className="flex-1 space-y-2">
                      <p className="text-gray-800 text-lg leading-relaxed">
                        {message.text}
                      </p>
                      <span className="inline-flex items-center px-3 py-1 text-sm text-blue-600 bg-blue-50 rounded-full font-medium">
                        {message.language}
                      </span>
                    </div>
                    <div className="flex gap-2 opacity-80 group-hover:opacity-100 transition-opacity">
                      <Button
                        disabled={isLoading}
                        onClick={() => buttonTranslateHandler(message.id)}
                        aria-label="Translate text"
                        className="bg-blue-600 hover:bg-blue-700 text-white w10 h10 rounded-xl transition-all duration-200 hover:scale-105"
                      >
                        <Languages className="h-full w-full" />
                      </Button>
                      <Button
                        disabled={isLoading}
                        onClick={() => handleSummarize(message.id)}
                        aria-label="Summarize text"
                        className="bg-blue-600 hover:bg-blue-700 text-white w10 h10 rounded-xl transition-all duration-200 hover:scale-105"
                      >
                        <FileText className="h-full w-full" />
                      </Button>
                    </div>
                  </div>

                  {translateMessageId === message.id && (
                    <div className="mt-6 animate-slideDown">
                      <Select
                        value={selectedLanguage}
                        onValueChange={setSelectedLanguage}
                      >
                        <SelectTrigger className="w-48 bg-white/90 border-gray-200 hover:border-blue-300 transition-colors">
                          <SelectValue placeholder="Select language" />
                        </SelectTrigger>
                        <SelectContent>
                          {languages.map((lang) => (
                            <SelectItem
                              key={lang.code}
                              value={lang.code}
                              onClick={() =>
                                handleTranslate(message.id, lang.code)
                              }
                              className="hover:bg-blue-50 cursor-pointer"
                            >
                              {lang.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  )}

                  {message.summary && (
                    <div className="mt-6 p-4 bg-gradient-to-r from-blue-50 to-blue-50/50 rounded-xl border border-blue-100 animate-fadeIn">
                      <p className="font-medium mb-2 text-blue-800">Summary</p>
                      <p className="text-blue-900 leading-relaxed">
                        {message.summary}
                      </p>
                    </div>
                  )}

                  {message.translation && (
                    <div className="mt-6 p-4 bg-gradient-to-r from-gray-50 to-transparent rounded-xl border border-gray-100 animate-fadeIn">
                      <p className="font-medium text-gray-700 leading-relaxed">
                        {message.translation}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            ))}
            <div ref={messagesEndRef} />
          </CardContent>
        </Card>

        {error && (
          <Alert
            variant="destructive"
            className="animate-shake bg-red-50 border-red-200 text-red-800"
          >
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="bg-white/80 backdrop-blur-sm p-6 rounded-2xl shadow-lg border border-gray-100">
          <textarea
            className="w-full p-4 border border-gray-200 rounded-xl resize-none h-32 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-lg"
            value={inputText}
            onChange={(e) => setInputText(e.target.value)}
            placeholder="Type your message here..."
            aria-label="Input text"
          />
          <div className="flex justify-end mt-4">
            <Button
              onClick={handleSend}
              disabled={isLoading}
              aria-label="Send message"
              className="bg-blue-600 hover:bg-blue-700 text-white h-12 px-6 rounded-xl shadow-sm transition-all duration-200 hover:scale-105 flex items-center gap-2"
            >
              {isLoading ? (
                <>
                  <Loader2 className="h-5 w-5 animate-spin" />
                  <span>Sending...</span>
                </>
              ) : (
                <>
                  <span>Send</span>
                  <Send className="h-5 w-5" />
                </>
              )}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default HelloWorld;
